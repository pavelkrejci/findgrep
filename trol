#!/usr/bin/perl
#
# trol - trace output less painful
# it can view or convert trace files (td,trd) to text on OS4k Manager or Assistant
#
use strict;
use sigtrap qw/handler sig_handler normal-signals/;
use Carp;
use Data::Dumper;
use POSIX qw(strftime);
use Getopt::Std;
use IO::Handle;
use Time::HiRes qw(usleep);

my $TBLKLEN   = 4096;    # Size of a block
my $TDUMPLMAX = 512;     # Maximum length of text+data to be dumped
my $DEBUG     = 0;       # debug switch

my $fn;
my $fh;
my $buffer;
my $format;
my $field;
my $hdr_size  = 0x2c;
my $alignment = 4;

my ( $ttype, $time, $ace_tid, $tid, $pid, $msec, $idx, $size, $text_len, $data_len, $line, $file );

my $trc_control = "CONTROL FILE";

my $trc_type = [
  "TMOD1", "TMOD2", "TMOD3", "TMOD4", "TMOD5", "TERR", "TUSR", "TSIG",
  "TIPC",  "TCMX",  "TTIM",  "TFOR",  "TJOB",  "TSIX"
];

my %escape_table = (
  "\a" => "\\a",     # 0x07
  "\b" => "\\b",     # 0x08
  "\f" => "\\f",     # 0x0C
  "\r" => "\\r",     # 0x0D
  "\e" => "\\e",     # 0x1B
  "\\" => "\\\\",    # 0x5C
);

my $header_format_standard = 'L L l l Z16 l l l';            # 32-bit
my $header_format_threaded = 'l l L S S S S S S S S Z16';    # 32-bit
my $header_format_rds      = 'L L l l l l l Z16';            # 32-bit, assi rds
my $header_format_cm       = 'L L l l l l l Z32';            # 32-bit
my $header_format_std64    = 'L L q l Z20 q l l';            # 64-bit, mgr
my $header_format_thr64    = 'q q L S S S S S S S S Z20';    # 64-bit, mgr, threaded
my $header_format_cm_64    = 'L L q q q l l Z32';            # 64-bit, cm mgr

my @hdr_sizes  = ( 0x2c, 0x2c, 0x3c, 0x2c, 0x38, 0x38, 0x48 );
my @alignments = ( 4,    4,    0,    0,    4,    4,    0 );

my $header_fields_standard = [ \$idx, \$size, \$ttype, \$line, \$file, \$time, \$text_len, \$data_len ];
my $header_fields_threaded =
  [ \$ttype, \$time, \$ace_tid, \$tid, \$pid, \$msec, \$idx, \$size, \$text_len, \$data_len, \$line, \$file ];
my $header_fields_cm  = [ \$idx, \$size, \$ttype, \$line, \$time, \$text_len, \$data_len, \$file ];
my $header_fields_rds = [ \$idx, \$size, \$ttype, \$line, \$time, \$text_len, \$data_len, \$file ];
my $header_fields_all = $header_fields_threaded;

my @formats =
  ( $header_format_standard, $header_format_threaded, $header_format_rds, $header_format_cm, $header_format_std64, $header_format_thr64, $header_format_cm_64 );

my @fields =
  ( $header_fields_standard, $header_fields_threaded, $header_fields_rds, $header_fields_cm, $header_fields_standard, $header_fields_threaded, $header_fields_cm );


my $blk_cnt=0;
my $blk_cur=0;
my %options;
my $mtime;
my $last_idx=0;
my $last_block_time=0;
my $pipe;

sub get_start_blk {
  print "get_start_blk start\n" if $DEBUG;
  
  my $file_size = (stat($fn))[7];
  $mtime = (stat($fn))[9];

  print "file: $fn, size: $file_size, mtime=$mtime\n" if $DEBUG;
  $blk_cnt=int($file_size / $TBLKLEN) + ($file_size % $TBLKLEN ? 1:0);
  print "blk_cnt=$blk_cnt\n" if $DEBUG;

  seek( $fh, 0, 0 );    # start from the begginning of the file
  my $a_1st_idx=0;
  $last_block_time=0;

  for ($blk_cur=0;$blk_cur<$blk_cnt;$blk_cur++) {
    return(-1) if seek($fh,$TBLKLEN*$blk_cur,0) < 0;
    if ( read( $fh, $buffer, $TBLKLEN ) > 0 ) {
      clear_header($header_fields_all);    # clear all trace vars
      parse_header( $format, $field, substr( $buffer,0, $hdr_size ) );
      printf("blk_cur=$blk_cur, idx: %d, last_block_time=%d, time=%d\n",$idx,$last_block_time,$time) if $DEBUG;
      last if $time < $last_block_time;
      last if ($idx < $a_1st_idx) && ($time <= $last_block_time);
      $a_1st_idx=$idx;
      $last_block_time=$time;
      print "setting last_block_time to time\n" if $DEBUG;
    }
  }
  if ($blk_cur >= $blk_cnt) {
    print "not found, file sequential\n" if $DEBUG;
    $blk_cur=0;
  }
  print "blk_cur=$blk_cur\n" if $DEBUG;
  my $seek=$TBLKLEN*$blk_cur;
  return(-1) if seek($fh,$seek,0) < 0;
  print "seek=$seek\n" if $DEBUG;

  return(-1) if read($fh,$buffer,$TBLKLEN) < $hdr_size;
  clear_header($header_fields_all);    # clear all trace vars
  parse_header( $format, $field, substr( $buffer,0, $hdr_size ) );
  $last_block_time=$time;

  printf("get_start_blk end, blk_cur=%d\n",$blk_cur) if $DEBUG;
  return(0);
}

sub get_idx_blk {
  print "get_idx_blk() blk_cur=$blk_cur\n" if $DEBUG;

  my $file_size = (stat($fn))[7];
  $mtime = (stat($fn))[9];

  print "file: $fn, size: $file_size, mtime=$mtime\n" if $DEBUG;
  $blk_cnt=int($file_size / $TBLKLEN) + ($file_size % $TBLKLEN ? 1:0);
  print "blk_cnt=$blk_cnt\n" if $DEBUG;

  seek( $fh, 0, 0 );    # start from the begginning of the file

  for ($blk_cur=0;$blk_cur<$blk_cnt;$blk_cur++) {
    return(-1) if seek($fh,$TBLKLEN*$blk_cur,0) < 0;
    if ( read( $fh, $buffer, $TBLKLEN ) > 0 ) {
      clear_header($header_fields_all);    # clear all trace vars
      parse_header( $format, $field, substr( $buffer, 0, $hdr_size ) );
      printf("blk_cur=$blk_cur, idx: %d, time=%d\n",$idx,$time) if $DEBUG;
      last if ($idx > $last_idx);
    }
  }
  $blk_cur--;
  $blk_cur=0 if ($blk_cur<0);
  print "blk_cur=$blk_cur\n" if $DEBUG;
  my $seek=$TBLKLEN*$blk_cur;
  return(-1) if seek($fh,$seek,0) < 0;
  print "seek=$seek\n" if $DEBUG;

  return(-1) if read($fh,$buffer,$TBLKLEN) < $hdr_size;
  return(0);
}

=for
sub get_last_blk {
  
  print "get_last_blk() start" if $DEBUG;
  return(-1) if get_start_blk()!=0;
  
  print "get_last_blk() blk_cur=$blk_cur, blk_cnt=$blk_cnt\n" if $DEBUG;

  if ($blk_cur == 0) {
    $blk_cur=$blk_cnt-1;
  } else {
    $blk_cur--;
  }

  print "get_last_blk() blk_cur=$blk_cur\n" if $DEBUG;
  my $seek=$TBLKLEN*$blk_cur;
  return(-1) if seek($fh,$seek,0) < 0;
  print "seek=$seek\n" if $DEBUG;

  return(-1) if read($fh,$buffer,$TBLKLEN) < $hdr_size;

  return(0);
}
=cut

sub get_last_blk {
  print "get_last_blk start\n" if $DEBUG;
  my $file_size = (stat($fn))[7];
  $mtime = (stat($fn))[9];

  print "file: $fn, size: $file_size, mtime=$mtime\n" if $DEBUG;
  $blk_cnt=int($file_size / $TBLKLEN) + ($file_size % $TBLKLEN ? 1:0);
  print "blk_cnt=$blk_cnt\n" if $DEBUG;

  seek( $fh, 0, 0 );    # start from the begginning of the file

  #find block with maximum time and index
  my $max_i=0;
  my $max_time=0;
  my $max_idx=0;

  for ($blk_cur=0;$blk_cur<$blk_cnt;$blk_cur++) {
    return(-1) if seek($fh,$TBLKLEN*$blk_cur,0) < 0;
    if ( read( $fh, $buffer, $TBLKLEN ) > 0 ) {
      clear_header($header_fields_all);    # clear all trace vars
      parse_header( $format, $field, substr( $buffer,0, $hdr_size ) );
      printf("blk_cur=$blk_cur, idx: %d, time=%d\n",$idx,$time) if $DEBUG;
      if ($time>$max_time || ($time==$max_time && $idx>$max_idx)) {
        $max_time=$time;
        $max_i=$blk_cur;
        $max_idx=$idx;
        printf("setting last block time=%d,i=%d,idx=%d\n",$max_time,$max_i,$max_idx) if $DEBUG;
      }
    }
  }
  $blk_cur=$max_i;
  $last_block_time=$max_time;

  print "last block found is $blk_cur\n" if $DEBUG;
  my $seek=$TBLKLEN*$blk_cur;
  return(-1) if seek($fh,$seek,0) < 0;
  print "seek=$seek\n" if $DEBUG;

  return(-1) if read($fh,$buffer,$TBLKLEN) < $hdr_size;
  clear_header($header_fields_all);    # clear all trace vars
  parse_header( $format, $field, substr( $buffer,0, $hdr_size ) );

  printf("get_last_blk end, blk_cur=%d\n",$blk_cur) if $DEBUG;
  return(0);
}

sub get_next_blk {
  print "get_next_blk(), blk_cur:$blk_cur, last_idx:$last_idx\n" if $DEBUG;
  $blk_cur++;
  if ($blk_cur == $blk_cnt) {
    $blk_cur=0;
  }
  return(-1) if seek($fh,$TBLKLEN*$blk_cur,0) < 0;
  return(-1) if read($fh, $buffer, $TBLKLEN) < $hdr_size;

  clear_header($header_fields_all);    # clear all trace vars
  parse_header( $format, $field, substr( $buffer, 0, $hdr_size ) );
  printf("blk_cur=%d, last_idx:%d, idx: %d,last_block_time:%d, time:%d\n",
    $blk_cur,$last_idx,$idx,$last_block_time,$time) if $DEBUG;

  return(0) if ($time > $last_block_time);
  return(0) if ($idx > $last_idx);
  return(1);
}

sub sig_handler {
  exit(0); # silently exit when SIGPIPE, SIGHUP, SIGINT or SIGTERM received
}

sub usage {
  print("usage: $0 [-f | -l] tracefile.td\n");
  print("       $0 tracefile1.td [tracefile2.td] ...\n");
  print("       -f = tail -f like behaviour\n");
  print("       -l = pipe through less\n");
}

sub I_am_interactive {
  return -t STDOUT;
}

sub clear_header {
  my @array = @{ $_[0] };
  for ( my $i = 0 ; $i < @array ; $i++ ) {
    ${ $array[$i] } = undef;
  }
  return;
}

sub parse_header {
  my $tmp_format = $_[0];
  my @array      = @{ $_[1] };
  my $data       = $_[2];

  my @tmp = unpack $tmp_format, $data;
  for ( my $i = 0 ; $i < @array ; $i++ ) {
    ${ $array[$i] } = $tmp[$i];
  }
}


sub print_header {
  printf( ">[I: %05u] ", $idx );
  my $tr_time_str;
  
#TODO fix $time=8247338242305713524 in symRefe.007.trd
#    print(stderr $time,",",localtime($time),"\n");
  eval {
    $tr_time_str = strftime("%b %e %H:%M:%S", localtime($time));
  };  
  if (my $e = $@) {
    print(stderr "Error: $e","filename=",$fn," time=",$time," localtime=",localtime($time));
  }
  printf( "[%s.%03u]", $tr_time_str, $msec ? $msec : 0 );
  printf( "[F: %s] ", $file );
  printf( "[L: %05d] ", $line );

  printf( "[P: %05d] ", $pid ? $pid : 0 );
  if ( $tid || $ace_tid ) {    # threads
    printf( "[UT: %03d] ", $tid );
    printf( "[AT: %lu] ",  $ace_tid );
  }
  if ( $ttype != -1 ) {
    my $i = 0;
    while ($ttype) {
      $i += 1;
      $ttype >>= 1;
    }
    printf( "[%s]\n", $trc_type->[$i] );
  }
  else {
    printf( "[%s]\n", $trc_control );
  }
  return ( $text_len, $data_len, $idx );
}

sub format_text {
  my $text = shift;
  my $translated;
  if ( $text =~ /[^[:print:]]/ ) {
    my $translated = "";
    for ( my $i = 0 ; $i < length($text) ; $i++ ) {
      my $char = substr( $text, $i, 1 );
      if ( $char ne "\n" and $char ne "\t" ) {
        if ( defined $escape_table{$char} ) {
          $char = $escape_table{$char};
        }
        else {
          $char =~ s/([^[:print:]])/"\\x".uc(unpack("H2", $1))/e;
        }
      }
      $translated .= $char;
    }
    print( $translated, "\n" );
  }
  else {
    print( $text, "\n" );
  }
  return;
}

sub format_data {
  my $data          = shift;
  my $offset        = shift;
  my $offset_format = defined $offset ? "%08x  " : "%05x  ";
  my $pos           = 0;
  while ( $pos < length($data) ) {
    my $line = substr( $data, $pos, 16 );
    printf( $offset_format, $pos + $offset );
    for ( my $i = 0 ; $i < 16 ; $i++ ) {
      if ( $i >= length($line) ) {
        print("  ") if ( $i == 8 );
        print("   ");
      }
      else {
        print("- ") if ( $i == 8 );
        printf( "%s ", unpack( 'H2', substr( $line, $i, 1 ) ) );
      }
    }
    $line =~ s/[^[:print:]]/./g;
    print( " ", $line );
    print("\n");
    $pos += 16;
  }
}

# 00000  6F 6B 20 55 56 38 2E 30 - 3A 31 32 38 0A           ok UV8.0:128.

sub view {
#
#  if (I_am_interactive()) {
#    if ($options{f}) {
#      exec("tail","-f",$fn);
#    } elsif ($options{l}) {
#      print "fn: $fn\n" if $DEBUG;
#      my $rc=exec("less","+G",$fn);
#      print "exec rc:$rc\n" if $DEBUG;
#    }
#  }

  seek($fh,0,0);
  my $read_bytes;
  while (<$fh>) {
    print;
  }
}

sub hexdump {
  seek($fh,0,0);
  my $read_bytes;
  while ( $read_bytes = read( $fh, $buffer, 16 ) > 0 ) {
    my $pos = tell $fh;
    format_data( $buffer, $pos );
  }
}


sub format_trace {
  my $fin=0;
  do {
    my $pos = 0;
    clear_header($header_fields_all);    # clear all trace vars
    while ( $pos + $hdr_size < length($buffer) ) {
      #printf( "pos: 0x%x\n", $pos ) if ($DEBUG);
      parse_header( $format, $field, substr( $buffer, $pos, $hdr_size ) );
      last
        if ( $pos + $hdr_size + $text_len + $data_len > length($buffer)
        || $size != $hdr_size + $text_len + $data_len );    # omit junk data at the end of block
      print "idx=$idx,last_idx:$last_idx\n" if $DEBUG;
      print_header() unless ($options{f} && ($idx <= $last_idx)); 
      $pos += $hdr_size;
      if ( $text_len > 0 ) {
        format_text(substr( $buffer, $pos, $text_len )) unless ($options{f} && ($idx <= $last_idx));
        my $align = $alignment == 0 ? 0 : ( $alignment - $text_len % $alignment ) % $alignment;
        $pos += $text_len + $align;
      }
      if ( $data_len > 0 ) {
        printf( "data_len = %d\n", $data_len ) if ($DEBUG);
        format_data( substr( $buffer, $pos, $data_len )) unless ($options{f} && ($idx <= $last_idx));
        my $align = $alignment == 0 ? 0 : ( $alignment - $text_len % $alignment ) % $alignment;
        $pos += $data_len + $align;
      }
      print("\n") unless ($options{f} && ($idx <= $last_idx));
      $last_idx=$idx if ($idx > $last_idx);
    }
    $fin = get_next_blk();
    print "get_next_blk()=$fin\n" if $DEBUG;
  } while ($fin==0);
}

sub detect_format {
  my $i;
  my $bytes_read = read( $fh, $buffer, 0x48 );
  for ( $i = 0 ; $i < @formats ; $i++ ) {
    eval {  # to catch unsupported quad word on 32-bit arch
      print "i:$i\n" if $DEBUG;
      print "formats[i]:$formats[$i]\n" if $DEBUG;
      parse_header( $formats[$i], $fields[$i], $buffer );
      print Dumper($fields[$i]) if ($DEBUG);
    };
    next if ($@);
    if ( $size == $hdr_sizes[$i] + $text_len + $data_len ) {
      $format    = $formats[$i];
      $field    = $fields[$i];
      $alignment = $alignments[$i];
      $hdr_size  = $hdr_sizes[$i];
      print Dumper($field) if $DEBUG;
      last;
    } else {
     ; # print Dumper($fields[$i]) if ($DEBUG);
    }
  }
  return $i;
}

### main
getopts('f:l', \%options);
if ($options{f}) {
  if (@ARGV>0) {
    usage();
    exit(1);
  }
  $ARGV[0] = $options{f};
} elsif ($options{l}) {    
  if (@ARGV == 0) {
    usage();
    exit(1);
  }
} else {
  if (@ARGV == 0) {
    usage();
    exit(1);
  }
}


if ($options{f}) {
  $fn = $ARGV[0];
      
  if (!open $fh, '<:raw', $fn) {
    carp "ERROR: Can't open file '$fn': $!";
    next;
  }
  my $i = detect_format();  
  if ( $i < @formats ) {    # is trace format recognized?    
    my $rc=get_last_blk();
    print "get_last_blk() rc=$rc, blk_cur=$blk_cur\n" if $DEBUG;
		#endless loop - can be breaked by a signal
    while (1) {
      format_trace();
      my $curr=0;
      do {
        $curr=(stat($fn))[9];
        usleep(10000);
      } until ($curr > $mtime);
      $mtime=$curr;
      my $rc=get_idx_blk();
    }
    close($fh);
  } else {                  # unknown format
    close($fh);
    exec("tail","-f",$fn);    
  }

} else {
  my %filenames;
        
  for (my $i=0;$i < @ARGV;$i++) {
    $fn=$ARGV[$i];
            
    if (!open $fh, '<:raw', $fn) {
      carp "ERROR: Can't open file '$fn': $!";
      next;
    }                  
    if (detect_format() < @formats) {
      my $rc=get_start_blk();
      print "get_start_blk() rc=$rc\n" if $DEBUG;
      print "Start block time:$time\n" if $DEBUG;
      while (defined($filenames{$time})) {
        $time++;
      }
      print "Assigned hash key (time)=$time\n" if $DEBUG;
      $filenames{$time}=$ARGV[$i];        
    } else {
      $filenames{$i}=$ARGV[$i];
    }
  }

  if (I_am_interactive() && $options{l}) {
    STDOUT->autoflush(1);
    open $pipe, '|-', 'less +G' and select($pipe);
  }
  
  #sort the files by time
  foreach my $key (sort(keys %filenames)) {
    $fn = $filenames{$key};
    print "Start time: $key, filename=$fn\n" if $DEBUG;
  
    #TODO needed?  $blk_cnt=0;
    #TODO needed?  $blk_cur=0;
  
    if (!open $fh, '<:raw', $fn) {
      carp "ERROR: Can't open file '$fn': $!";
      next;
    }
  
    my $i = detect_format();  
    if ( $i < @formats ) {    # is trace format recognized?          
        my $rc=get_start_blk();
        print "get_start_blk() rc=$rc\n" if $DEBUG;
        format_trace();      
    } else {                  # unknown format
      if ( -T $fn ) {         # is it a text file?
        view();               # yes, view in text mode
      }
      else {
        hexdump();            # no, display hex dump
      }
    }
    close($fh);
  }
  
  if (defined $pipe and fileno($pipe) >= 0) {
    close($pipe);
  }
}

exit(0);
